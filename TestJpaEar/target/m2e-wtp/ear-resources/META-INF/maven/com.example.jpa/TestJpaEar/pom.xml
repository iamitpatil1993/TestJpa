<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.example.jpa</groupId>
		<artifactId>TestJpa</artifactId>
		<version>1.0</version>
	</parent>

	<artifactId>TestJpaEar</artifactId>
	<name>TestJpaEar</name>
	<url>http://maven.apache.org</url>
	<packaging>ear</packaging>


	<dependencies>
		<!-- we need to add other internal projects here as dependency -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>TestEjbJpa</artifactId>
			<version>${project.version}</version>
			<type>ejb</type>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>TestJpaWeb</artifactId>
			<version>${project.version}</version>
			<type>war</type>
		</dependency>

	</dependencies>


	<build>
		<finalName>TestJpaEar</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-ear-plugin</artifactId>
				<version>${maven.ear.plugin.version}</version>
				<configuration>
					<!-- By default, your application.xml will not be picked even if you 
						include it in src/main/application/META-INF/application.xml in your maven 
						ear project that's because it will be autogenerated by the configuration 
						specified at <configuration> of the maven-ear-plugin. If you want yours to 
						be included you need to change generateApplicationXml to false (defaults 
						to true). -->
					<!-- So, currently I am not creating application.xml file manually rather 
						will depend on one that is auto-generated by this plugin -->

					<version>${application.xml.versions}</version>
					<generateApplicationXml>true</generateApplicationXml>
					<filtering>true</filtering>
					
					<!-- Must not use below tag. Because it does not creates lib directory -->
					<!-- <defaultJavaBundleDir>lib</defaultJavaBundleDir> -->
					
					<!-- Usse this tag, it create lib directory and puts jars in it for maven modules whose packaging in jar -->
					<defaultLibBundleDir>lib</defaultLibBundleDir>

					<!-- we need to specify only those modules here that will go to application.xml XtrPojo will not go in application.xml file -->
					<modules>
						<!-- <jarModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>TestPojo</artifactId>
						</jarModule> -->

						<ejbModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>TestEjbJpa</artifactId>
						</ejbModule>

						<webModule>
							<groupId>${project.groupId}</groupId>
							<artifactId>TestJpaWeb</artifactId>
							<contextRoot>/TestEjbWeb</contextRoot>
						</webModule>
					</modules>

				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
