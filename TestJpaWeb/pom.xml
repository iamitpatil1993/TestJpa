<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.example.jpa</groupId>
		<artifactId>TestJpa</artifactId>
		<version>1.0</version>
	</parent>

	<artifactId>TestJpaWeb</artifactId>
	<packaging>war</packaging>
	<name>TestJpaWeb Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>TestEjbJpa</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.example.jpa</groupId>
			<artifactId>CommonResources</artifactId>
			<version>1.0</version>
			<type>zip</type>
			<classifier>resources</classifier>
			<scope>provided</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${apache.commons.file-upload.version}</version>
		</dependency>

		<!-- We have added custom module for quartz, so no need to take these jars 
			in deployment artifact i.e war so making it's scope to provided because jboss 
			will load module for quartz at deployment time, by reading jboss-deployment-strucuture.xml -->
		<!-- This is exacty similar to javax-api which container provides to us. 
			In same way we have configured a module which jboss will load at deployment 
			time, and will put all required classes in class path. So no need to package 
			these jars. -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz</artifactId>
			<version>${quartz.version}</version>
			<scope>provided</scope> <!-- above comment added especially for scope tag -->
		</dependency>

		<!-- We have added custom module for quartz, so no need to take these jars 
			in deployment artifact i.e war so making it's scope to provided because jboss 
			will load module for quartz at deployment time, by reading jboss-deployment-strucuture.xml -->
		<!-- This is exacty similar to javax-api which container provides to us. 
			In same way we have configured a module which jboss will load at deployment 
			time, and will put all required classes in class path. So no need to package 
			these jars. -->

		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz-jobs</artifactId>
			<version>${quartz.version}</version>
			<scope>provided</scope><!-- above comment added especially for scope tag -->
		</dependency>
	</dependencies>

	<build>
		<finalName>TestJpaWeb</finalName>
		<!-- <resources> <resource> <directory>sec/main/resources</directory> </resource> 
			<resource> <directory>${project.build.directory}/generated-resources</directory> 
			</resource> </resources> -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven.war.plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-shared-resources</id>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<includeArtifacIds>CommonResources</includeArtifacIds>
							<includeGroupIds>com.example.jpa</includeGroupIds>
							<excludeTransitive>true</excludeTransitive>
							<excludeArtifactIds>TestEjbJpa</excludeArtifactIds>
							<!--use as much as needed to be specific...also scope,type,classifier 
								etc -->
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
